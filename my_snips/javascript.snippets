######### React Snippets #########

snippet importreact "Import React"
import React from 'react'; // eslint-disable-line
import PropTypes from 'prop-types';
endsnippet

snippet class "React Class"
class $1 extends React.Component {
	$0
}

$1.propTypes = {
};

export default $1;
endsnippet

snippet constructor "React Class Constructor"
constructor(props) {
	super(props);
	this.state = {$1};
}
endsnippet

snippet bind
this.$1 = this.$1.bind(this);
endsnippet

snippet render "React Class Render Method"
render() {
	return (
		$0
	);
}
endsnippet

snippet sfc "Stateless functional component"
const $1 = props => {
	return (
		$0
	);
};

$1.propTypes = {
};

export default $1;
endsnippet

snippet action "React action"
/**
 * $1
 * @return {Object} The action object
 */
export function $2($3) {
	return {
		type: $4,$0
	};
}
endsnippet

snippet reducer "React Reducer"
const startingState = {$1};

export default function $2(startingState, action) {
	switch (action.type) {
		case $3:
			return $4;$0
		default:
			return state;
	}
}
endsnippet

snippet container "React Container"
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';

import $1 from '$2';
import { $3 } from '$4';

function mapStateToProps(state) {
	return state;
}

function mapDispatchToProps(dispatch) {
	const actions = { $3 };

	return bindActionCreators(actions, dispatch);
}

export default connect(mapStateToProps, mapDispatchToProps)($1);
endsnippet

snippet router "React Router"
import React from 'react'; // eslint-disable-line
import { Router, Route } from 'react-router';
import history from '../history';

class $1 extends React.Component {
	render() {
		return (
			<Router history={history}>
				$0
			</Router>
		)
	}
}

export default $1;
endsnippet

snippet route "React Route"
<Route path="/$1" component={$2} />$0
endsnippet

snippet testactions "Test react action file"
const assert = require('assert');
const $1 = require('$2');

describe("$1", () => {
	$3
});
endsnippet

snippet testaction "Test react action"
describe("$1", () => {
	it("should contain the expected type$2", () => {
		assert.deepEqual($1, {
			type: $3,
		});
	});
});
endsnippet

snippet testreducers "Test React reducers"
import assert from 'assert';
import $1 from '$2';

describe("$1", () => {
	$0
});
endsnippet

snippet testreducer "Test React reducer"
describe("$1", () => {

	it("Should $2", () => {
		// define starting state
		const startingState = {
			$3
		};

		// define action
		const myAction = {
			type: $4,
		};
		
		// pass the starting state and action into the reducer to get the result
		const result = $5(startingState, myAction);
		
		// assert the value of the output is as expected
		assert.deepEqual(result, {
			$3$0
		});
		
		// assert that the initial state was not mutated
		assert.notDeepEqual(result, startingState);
	});
});
endsnippet

######## End of React Snippets ########

######## JavaScript Snippets ########

snippet switch "Switch Statement"
switch($1) {
	case $2:
		$3;
		break;$4
	default:
		$5
}
endsnippet

snippet case "Switch case"
case $1:
	$2;
	break;
endsnippet

snippet cl "console.log"
console.log("$1: ", $1);
endsnippet
