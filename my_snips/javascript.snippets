snippet cl "console.log"
console.log("$1: ", $1);
endsnippet

snippet rdiv "react div"
<div className="$1">$2</div>
endsnippet	

snippet iR "Import React"
import React from 'react'; // eslint-disable-line
import PropTypes from 'prop-types';
endsnippet

snippet class "React Class"
import React from 'react'; // eslint-disable-line
import PropTypes from 'prop-types';

class $1 extends React.Component {
	constructor(props) {
		super(props);
		this.state = {};
	}

	render() {
		return (
			$0
		);
	}
}

$1.propTypes = {
};

export default $1
endsnippet

snippet router "React Router"
import React from 'react'; // eslint-disable-line
import { Router, Route } from 'react-router';
import history from '../history';

class $1 extends React.Component {
	render() {
		return (
			<Router history={history}>
			</Router>
		)
	}
}

export default $1;
endsnippet

snippet route "React Route"
<Route path="/$1" component={$2} />$0
endsnippet

snippet testreducer "React Reducer Test"
describe("$1", () => {

	it("Should $2", () => {
		// define starting state
		const startingState = {$3};

		// define action
		const myAction = {
			type: $4,
		};
		
		// pass the starting state and action into the reducer to get the result
		const result = $5;
		
		// assert the value of the output is as expected
		assert.deepEqual(result, {
			$6
		});
		
		// assert that the initial state was not mutated
		assert.notDeepEqual(result, startingState);
	});

	it("Should $7", () => {
		// define starting state
		const startingState = {$8};

		// define action
		const myAction = {
			type: $9,
		};
		
		// pass the starting state and action into the reducer to get the result
		const result = audience(startingState, myAction);
		
		// assert the value of the output is as expected
		assert.deepEqual(result, {
			$10
		});
		
		// assert that the initial state was not mutated
		assert.notDeepEqual(result, startingState);
	});
});
endsnippet
